# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chatbot_pb2 as chatbot__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chatbot_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatbotServiceStub(object):
    """Service definition for the AI Chatbot
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamChat = channel.unary_stream(
                '/chatbot.ChatbotService/StreamChat',
                request_serializer=chatbot__pb2.ChatRequest.SerializeToString,
                response_deserializer=chatbot__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.GetHistory = channel.unary_unary(
                '/chatbot.ChatbotService/GetHistory',
                request_serializer=chatbot__pb2.HistoryRequest.SerializeToString,
                response_deserializer=chatbot__pb2.HistoryResponse.FromString,
                _registered_method=True)
        self.ClearConversation = channel.unary_unary(
                '/chatbot.ChatbotService/ClearConversation',
                request_serializer=chatbot__pb2.ClearRequest.SerializeToString,
                response_deserializer=chatbot__pb2.ClearResponse.FromString,
                _registered_method=True)
        self.GetUserConversations = channel.unary_unary(
                '/chatbot.ChatbotService/GetUserConversations',
                request_serializer=chatbot__pb2.UserConversationsRequest.SerializeToString,
                response_deserializer=chatbot__pb2.UserConversationsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/chatbot.ChatbotService/HealthCheck',
                request_serializer=chatbot__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=chatbot__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class ChatbotServiceServicer(object):
    """Service definition for the AI Chatbot
    """

    def StreamChat(self, request, context):
        """Streaming RPC for chat interaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistory(self, request, context):
        """Get conversation history
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearConversation(self, request, context):
        """Clear conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserConversations(self, request, context):
        """Get all conversations for a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatbotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=chatbot__pb2.ChatRequest.FromString,
                    response_serializer=chatbot__pb2.ChatResponse.SerializeToString,
            ),
            'GetHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistory,
                    request_deserializer=chatbot__pb2.HistoryRequest.FromString,
                    response_serializer=chatbot__pb2.HistoryResponse.SerializeToString,
            ),
            'ClearConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearConversation,
                    request_deserializer=chatbot__pb2.ClearRequest.FromString,
                    response_serializer=chatbot__pb2.ClearResponse.SerializeToString,
            ),
            'GetUserConversations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserConversations,
                    request_deserializer=chatbot__pb2.UserConversationsRequest.FromString,
                    response_serializer=chatbot__pb2.UserConversationsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=chatbot__pb2.HealthCheckRequest.FromString,
                    response_serializer=chatbot__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chatbot.ChatbotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chatbot.ChatbotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatbotService(object):
    """Service definition for the AI Chatbot
    """

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chatbot.ChatbotService/StreamChat',
            chatbot__pb2.ChatRequest.SerializeToString,
            chatbot__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.ChatbotService/GetHistory',
            chatbot__pb2.HistoryRequest.SerializeToString,
            chatbot__pb2.HistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.ChatbotService/ClearConversation',
            chatbot__pb2.ClearRequest.SerializeToString,
            chatbot__pb2.ClearResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserConversations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.ChatbotService/GetUserConversations',
            chatbot__pb2.UserConversationsRequest.SerializeToString,
            chatbot__pb2.UserConversationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chatbot.ChatbotService/HealthCheck',
            chatbot__pb2.HealthCheckRequest.SerializeToString,
            chatbot__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
